using System;
using System.Linq;
using System.Windows;
using MilkTeaShop.Domain.Entities;
using MilkTeaShop.Infrastructure.Services;
using MilkTeaShop.Application.Services;
using MilkTeaShop.Presentation.Auth;

namespace MilkTeaShop.Presentation
{
    public partial class AdminWorkWindow : Window
    {
        private readonly IUserService _userService;
        private readonly IMenuService _menuService;
        private readonly DateTime _startTime;

        public AdminWorkWindow()
        {
            _startTime = DateTime.Now;
            Console.WriteLine("Starting AdminWorkWindow initialization...");
            
            try
            {
                InitializeComponent();
                Console.WriteLine("Window components initialized");
                
                this.WindowState = WindowState.Maximized;
                Console.WriteLine("Window state set to Maximized");
                
                if (!CurrentUser.Instance.IsLoggedIn || CurrentUser.Instance.LoggedInUser == null)
                {
                    Console.WriteLine("WARNING: No logged-in user when AdminWorkWindow constructor called");
                    MessageBox.Show("Không tìm thấy thông tin đăng nhập. Vui lòng đăng nhập lại.", 
                                   "Cảnh báo", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
                else
                {
                    Console.WriteLine($"Logged in user confirmed: {CurrentUser.Instance.LoggedInUser.FullName} ({CurrentUser.Instance.LoggedInUser.Role})");
                    UpdateUIForCurrentUser();
                    Console.WriteLine("UI updated for current user");
                }
                
                try
                {
                    _userService = new EfUserService(); // Use EF-based service for database connection
                    _menuService = new EfMenuService();
                    Console.WriteLine("Services initialized successfully");
                    
                    LoadSystemInfo();
                }
                catch (Exception serviceEx)
                {
                    Console.WriteLine($"Warning: Service initialization failed: {serviceEx.Message}");
                    MessageBox.Show($"Một số dịch vụ không khởi tạo được: {serviceEx.Message}\n\nỨng dụng vẫn có thể hoạt động.", 
                                   "Cảnh báo dịch vụ", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
                
                Console.WriteLine("AdminWorkWindow initialization completed successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR in AdminWorkWindow constructor: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                
                MessageBox.Show($"Có lỗi khi khởi tạo cửa sổ quản trị: {ex.Message}\n\nỨng dụng sẽ tiếp tục hoạt động với chức năng hạn chế.", 
                              "Lỗi khởi tạo", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void RestartApplication()
        {
            try
            {
                Console.WriteLine("Restarting application...");
                CurrentUser.Instance.Logout();
                System.Windows.Application.Current.Shutdown();
                System.Diagnostics.Process.Start(System.Diagnostics.Process.GetCurrentProcess().MainModule!.FileName!);
            }
            catch
            {
                System.Windows.Application.Current.Shutdown();
            }
        }

        private void UpdateUIForCurrentUser()
        {
            if (!CurrentUser.Instance.IsLoggedIn) return;

            var user = CurrentUser.Instance.LoggedInUser!;
            
            var welcomeText = this.FindName("WelcomeText") as System.Windows.Controls.TextBlock;
            var roleText = this.FindName("RoleText") as System.Windows.Controls.TextBlock;
            
            if (welcomeText != null)
                welcomeText.Text = $"Xin chào, {user.FullName}";
            
            if (roleText != null)
                roleText.Text = $"Vai trò: {CurrentUser.Instance.GetRoleDisplayName()}";
            
            Console.WriteLine($"Admin interface updated for: {user.FullName} ({user.Role})");
        }

        private async void LoadSystemInfo()
        {
            try
            {
                // Load total users
                var users = await _userService.GetAllUsersAsync();
                var totalUsersText = this.FindName("TotalUsersText") as System.Windows.Controls.TextBlock;
                if (totalUsersText != null)
                    totalUsersText.Text = $"{users.Count()}";

                // Load total menu items
                var menuItems = await _menuService.GetAllItemsAsync();
                var totalMenuItemsText = this.FindName("TotalMenuItemsText") as System.Windows.Controls.TextBlock;
                if (totalMenuItemsText != null)
                    totalMenuItemsText.Text = $"{menuItems.Count()}";

                // Update database status
                var databaseStatusText = this.FindName("DatabaseStatusText") as System.Windows.Controls.TextBlock;
                if (databaseStatusText != null)
                    databaseStatusText.Text = "Kết nối thành công";

                // Update uptime
                var uptimeText = this.FindName("UptimeText") as System.Windows.Controls.TextBlock;
                if (uptimeText != null)
                {
                    var uptime = DateTime.Now - _startTime;
                    uptimeText.Text = $"{uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
                }

                Console.WriteLine("System info loaded successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading system info: {ex.Message}");
                
                var databaseStatusText = this.FindName("DatabaseStatusText") as System.Windows.Controls.TextBlock;
                if (databaseStatusText != null)
                {
                    databaseStatusText.Text = "Lỗi kết nối";
                    databaseStatusText.Foreground = System.Windows.Media.Brushes.Red;
                }
            }
        }

        // Event handlers for 4 main functions
        private void OpenPOS_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var posWindow = new MainWindow();
                posWindow.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi mở hệ thống POS: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenUserManagement_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var userManagementWindow = new UserManagementWindow(canEditUsers: true);
                userManagementWindow.Owner = this;
                userManagementWindow.ShowDialog();
                
                LoadSystemInfo(); // Refresh after user management
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi mở quản lý người dùng: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenReports_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var reportsWindow = new SalesReportWindow();
                reportsWindow.Owner = this;
                reportsWindow.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi mở báo cáo: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenMenuManagement_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var settingsWindow = new SettingsWindow();
                settingsWindow.Owner = this;
                settingsWindow.ShowDialog();
                
                LoadSystemInfo(); // Refresh after menu management
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi mở cài đặt menu: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // Basic user functions
        private void ChangePassword_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var changePasswordWindow = new ChangePasswordWindow();
                changePasswordWindow.Owner = this;
                changePasswordWindow.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi mở cửa sổ đổi mật khẩu: {ex.Message}", 
                               "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Logout_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc muốn đăng xuất?", 
                "Xác nhận đăng xuất",
                MessageBoxButton.YesNo, 
                MessageBoxImage.Question);
                
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    Console.WriteLine("Admin logging out...");
                    CurrentUser.Instance.Logout();
                    RestartApplication();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during logout: {ex.Message}");
                    MessageBox.Show($"Lỗi đăng xuất: {ex.Message}", 
                                   "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void RefreshSystemInfo_Click(object sender, RoutedEventArgs e)
        {
            LoadSystemInfo();
        }
    }
}