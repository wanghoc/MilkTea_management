using Microsoft.EntityFrameworkCore;
using MilkTeaShop.Application.Services;
using MilkTeaShop.Domain.Data;
using MilkTeaShop.Domain.Entities;
using MilkTeaShop.Domain.ValueObjects;
using MilkTeaShop.Infrastructure.Data;

namespace MilkTeaShop.Infrastructure.Services;

public class EfMenuService : IMenuService
{
    public EfMenuService()
    {
        InitializeDatabase();
    }

    private void InitializeDatabase()
    {
        try
        {
            using var db = new MilkTeaDbContext();
            
            // Tạo database và tables
            db.Database.EnsureCreated();
            
            // Seed data từ StaticMenuData nếu database trống
            if (!db.MenuItems.Any())
            {
                Console.WriteLine("Seeding database with initial data...");
                
                var items = StaticMenuData.GetAllItems();
                
                // Đảm bảo mỗi item có Id
                foreach (var item in items)
                {
                    if (string.IsNullOrWhiteSpace(item.Id))
                        item.Id = Guid.NewGuid().ToString();
                }
                
                db.MenuItems.AddRange(items);
                db.SaveChanges();
                
                Console.WriteLine($"Seeded {items.Count} menu items to database.");
            }
            
            Console.WriteLine($"Database initialized at: {MilkTeaDbContext.GetDatabasePath()}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing database: {ex.Message}");
            // Continue without database if initialization fails
        }
    }

    public List<MenuItem> GetMilkTeaItems()
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.MenuItems
                     .Where(x => x.Category == MenuCategory.MilkTea && x.IsAvailable)
                     .OrderBy(x => x.Name)
                     .AsNoTracking()
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting milk tea items: {ex.Message}");
            // Fallback to static data
            return StaticMenuData.MilkTeaItems.Where(x => x.IsAvailable).ToList();
        }
    }

    public List<MenuItem> GetToppingItems()
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.MenuItems
                     .Where(x => x.Category == MenuCategory.Topping && x.IsAvailable)
                     .OrderBy(x => x.Name)
                     .AsNoTracking()
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting topping items: {ex.Message}");
            // Fallback to static data
            return StaticMenuData.ToppingItems.Where(x => x.IsAvailable).ToList();
        }
    }

    public List<MenuItem> GetAllItems()
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.MenuItems
                     .Where(x => x.IsAvailable)
                     .OrderBy(x => x.Category).ThenBy(x => x.Name)
                     .AsNoTracking()
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting all items: {ex.Message}");
            // Fallback to static data
            return StaticMenuData.GetAllItems().Where(x => x.IsAvailable).ToList();
        }
    }

    public void AddNewItem(MenuItem item)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(item.Id))
                item.Id = Guid.NewGuid().ToString();

            using var db = new MilkTeaDbContext();
            db.MenuItems.Add(item);
            db.SaveChanges();
            
            Console.WriteLine($"Added new item: {item.Name}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding item: {ex.Message}");
            // Fallback to static data
            StaticMenuData.AddNewItem(item);
        }
    }

    public MenuItem? GetItemById(string id)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.MenuItems.AsNoTracking().FirstOrDefault(x => x.Id == id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting item by id: {ex.Message}");
            // Fallback to static data
            return StaticMenuData.GetAllItems().FirstOrDefault(x => x.Id == id);
        }
    }

    public void UpdateItem(MenuItem item)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            db.MenuItems.Update(item);
            db.SaveChanges();
            
            Console.WriteLine($"Updated item: {item.Name}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating item: {ex.Message}");
            // Fallback to static data
            var allItems = StaticMenuData.GetAllItems();
            var existingItem = allItems.FirstOrDefault(x => x.Id == item.Id);
            if (existingItem != null)
            {
                StaticMenuData.UpdateItem(existingItem, item);
            }
        }
    }

    public bool RemoveItem(MenuItem item)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            
            var existingItem = db.MenuItems.FirstOrDefault(x => x.Id == item.Id);
            if (existingItem != null)
            {
                // Soft delete - chỉ set IsAvailable = false
                existingItem.IsAvailable = false;
                db.SaveChanges();
                
                Console.WriteLine($"Removed item: {item.Name}");
                return true;
            }
            
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing item: {ex.Message}");
            // Fallback to static data
            return StaticMenuData.RemoveItem(item);
        }
    }

    public void HardDeleteItem(string itemId)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            
            var item = db.MenuItems.FirstOrDefault(x => x.Id == itemId);
            if (item != null)
            {
                db.MenuItems.Remove(item);
                db.SaveChanges();
                
                Console.WriteLine($"Hard deleted item: {item.Name}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error hard deleting item: {ex.Message}");
        }
    }
}