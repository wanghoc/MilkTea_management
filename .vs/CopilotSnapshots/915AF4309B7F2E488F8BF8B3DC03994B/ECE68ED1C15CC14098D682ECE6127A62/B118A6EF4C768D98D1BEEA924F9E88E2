using MilkTeaShop.Domain.Entities;
using MilkTeaShop.Infrastructure.Data;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;

namespace MilkTeaShop.Infrastructure.Services;

public interface IEfReceiptService
{
    string GenerateReceipt(Order order, string customerNote = "");
    void PrintReceipt(string receipt);
    void SaveReceipt(Order order, string customerNote, string receiptContent);
    List<Receipt> GetAllReceipts();
    List<Receipt> GetReceiptsByDateRange(DateTime from, DateTime to);
    Receipt? GetReceiptById(string id);
    decimal GetTotalSalesForDate(DateTime date);
    List<(string ItemName, int Quantity, decimal Revenue)> GetTopSellingItems(int count = 10);
}

public class EfReceiptService : IEfReceiptService
{
    public string GenerateReceipt(Order order, string customerNote = "")
    {
        var receipt = "";
        
        // Header
        receipt += "════════════════════════════════════════\n";
        receipt += "         🧋 WANGHOC MILK TEA 🧋         \n";
        receipt += "════════════════════════════════════════\n";
        receipt += $"Mã đơn hàng: {order.Id[..8]}\n";
        receipt += $"Thời gian: {DateTime.Now:dd/MM/yyyy HH:mm:ss}\n";
        receipt += "════════════════════════════════════════\n";
        receipt += "CHI TIẾT ĐƠN HÀNG:\n";
        receipt += "════════════════════════════════════════\n";

        // Items
        foreach (var item in order.Items)
        {
            receipt += $"{item.Description}\n";
            receipt += $"Size: {item.Size} | Số lượng: {item.Quantity}\n";
            
            // Display customizations if any
            if (!string.IsNullOrEmpty(item.SugarLevel) && item.SugarLevel != "100%")
                receipt += $"Đường: {item.SugarLevel} | ";
            if (!string.IsNullOrEmpty(item.IceLevel) && item.IceLevel != "100%")
                receipt += $"Đá: {item.IceLevel}";
            if ((!string.IsNullOrEmpty(item.SugarLevel) && item.SugarLevel != "100%") || 
                (!string.IsNullOrEmpty(item.IceLevel) && item.IceLevel != "100%"))
                receipt += "\n";
            
            // Display toppings if any
            if (item.Toppings != null && item.Toppings.Any())
            {
                receipt += $"Topping: {string.Join(", ", item.Toppings)}\n";
            }
            
            receipt += $"Đơn giá: {item.GetPrice():N0}đ\n";
            receipt += $"Thành tiền: {item.LineTotal:N0}đ\n";
            receipt += "----------------------------------------\n";
        }

        // Totals
        receipt += "════════════════════════════════════════\n";
        receipt += $"Tạm tính: {order.Subtotal:N0}đ\n";
        if (order.Discount > 0)
            receipt += $"Giảm giá: -{order.Discount:N0}đ\n";
        receipt += $"TỔNG CỘNG: {order.Total:N0}đ\n";
        receipt += "════════════════════════════════════════\n";

        // Customer note
        if (!string.IsNullOrEmpty(customerNote))
        {
            receipt += $"Ghi chú: {customerNote}\n";
            receipt += "════════════════════════════════════════\n";
        }

        // Footer
        receipt += "🌟 Cảm ơn quý khách đã sử dụng dịch vụ! 🌟\n";
        receipt += "      Hẹn gặp lại tại WangHoc Milk Tea!    \n";
        receipt += "════════════════════════════════════════";

        // Save to database
        SaveReceipt(order, customerNote, receipt);

        return receipt;
    }

    public void PrintReceipt(string receipt)
    {
        // Trong thực tế sẽ gửi đến máy in
        Console.WriteLine("PRINTING RECEIPT:");
        Console.WriteLine(receipt);
    }

    public void SaveReceipt(Order order, string customerNote, string receiptContent)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            
            var receipt = new Receipt
            {
                Id = Guid.NewGuid().ToString(),
                OrderId = order.Id,
                CreatedAt = DateTime.Now,
                Subtotal = order.Subtotal,
                Discount = order.Discount,
                Total = order.Total,
                CustomerNote = customerNote,
                ReceiptContent = receiptContent,
                PaymentMethod = "Cash"
            };

            // Tạo receipt items
            foreach (var orderItem in order.Items)
            {
                var receiptItem = new ReceiptItem
                {
                    Id = Guid.NewGuid().ToString(),
                    ReceiptId = receipt.Id,
                    DrinkName = orderItem.Description,
                    Size = orderItem.Size.ToString(),
                    Quantity = orderItem.Quantity,
                    SugarLevel = orderItem.SugarLevel,
                    IceLevel = orderItem.IceLevel,
                    Toppings = JsonSerializer.Serialize(orderItem.Toppings ?? new List<string>()),
                    UnitPrice = orderItem.GetPrice(),
                    LineTotal = orderItem.LineTotal
                };
                
                receipt.Items.Add(receiptItem);
            }

            db.Receipts.Add(receipt);
            db.SaveChanges();
            
            Console.WriteLine($"Receipt saved with ID: {receipt.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving receipt: {ex.Message}");
        }
    }

    public List<Receipt> GetAllReceipts()
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.Receipts
                     .Include(r => r.Items)
                     .OrderByDescending(r => r.CreatedAt)
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting all receipts: {ex.Message}");
            return new List<Receipt>();
        }
    }

    public List<Receipt> GetReceiptsByDateRange(DateTime from, DateTime to)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.Receipts
                     .Include(r => r.Items)
                     .Where(r => r.CreatedAt >= from && r.CreatedAt <= to)
                     .OrderByDescending(r => r.CreatedAt)
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting receipts by date range: {ex.Message}");
            return new List<Receipt>();
        }
    }

    public Receipt? GetReceiptById(string id)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            return db.Receipts
                     .Include(r => r.Items)
                     .FirstOrDefault(r => r.Id == id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting receipt by id: {ex.Message}");
            return null;
        }
    }

    public decimal GetTotalSalesForDate(DateTime date)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            var startOfDay = date.Date;
            var endOfDay = startOfDay.AddDays(1);
            
            return db.Receipts
                     .Where(r => r.CreatedAt >= startOfDay && r.CreatedAt < endOfDay)
                     .Sum(r => r.Total);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting total sales for date: {ex.Message}");
            return 0;
        }
    }

    public List<(string ItemName, int Quantity, decimal Revenue)> GetTopSellingItems(int count = 10)
    {
        try
        {
            using var db = new MilkTeaDbContext();
            
            return db.ReceiptItems
                     .GroupBy(ri => ri.DrinkName)
                     .Select(g => new
                     {
                         ItemName = g.Key,
                         Quantity = g.Sum(x => x.Quantity),
                         Revenue = g.Sum(x => x.LineTotal)
                     })
                     .OrderByDescending(x => x.Quantity)
                     .Take(count)
                     .ToList()
                     .Select(x => (x.ItemName, x.Quantity, x.Revenue))
                     .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting top selling items: {ex.Message}");
            return new List<(string, int, decimal)>();
        }
    }
}