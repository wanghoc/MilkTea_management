# 📚 HƯỚNG DẪN: THÊM TOPPING MỚI VÀO HỆ THỐNG

## 🎯 Tổng quan

Sau khi fix lỗi **Dynamic Topping**, hệ thống giờ đây hỗ trợ:
- ✅ Thêm topping mới **KHÔNG CẦN lập trình viên**
- ✅ Giá topping tự động hiển thị trong hóa đơn
- ✅ Quản lý linh hoạt qua giao diện Settings

---

## 👨‍💼 DÀNH CHO ADMIN

### 📋 Bước 1: Truy cập Settings

1. **Đăng nhập** với tài khoản Admin/Manager
2. Click nút **"⚙️ Cài đặt"** ở góc trên bên phải
3. Chọn tab **"Menu Items"**

### 📋 Bước 2: Thêm Topping mới

1. Click nút **"➕ Thêm món mới"**

2. **Điền thông tin:**
   ```
   📝 Tên món:        Thạch bạc hà
   💰 Giá:            10000
   📂 Danh mục:       Topping  ← QUAN TRỌNG!
   📄 Mô tả:          Thạch bạc hà mát lạnh sảng khoái
   🖼️ Hình ảnh:       (Tùy chọn)
   ✅ Còn hàng:       Checked
   ```

3. Click **"💾 Lưu"**

4. **Xác nhận** topping đã xuất hiện trong danh sách

### 📋 Bước 3: Kiểm tra

1. **Đóng** cửa sổ Settings
2. **Quay lại** màn hình POS
3. Cuộn xuống danh sách Topping
4. **Xác nhận** topping mới hiển thị với giá đúng

### 📋 Bước 4: Test đơn hàng

1. Chọn một món trà sữa bất kỳ
2. Click chọn topping mới
3. **Kiểm tra preview price** - phải bao gồm giá topping
4. Thêm vào giỏ hàng
5. **Thanh toán** và xem hóa đơn
6. **Xác nhận:**
   - ✅ Topping hiển thị trong hóa đơn
   - ✅ Giá topping được cộng vào tổng
   - ✅ Chi tiết đầy đủ

---

## 🔧 DÀNH CHO DEVELOPER

### 🎨 Kiến trúc hệ thống

#### **1. DynamicTopping Decorator**

**File:** `MilkTeaShop.Domain/Patterns/Decorator/ToppingDecorators.cs`

```csharp
public class DynamicTopping : DrinkDecorator
{
    private readonly string _toppingName;
    private readonly decimal _toppingPrice;

    public DynamicTopping(IPriceable inner, string toppingName, decimal toppingPrice) 
        : base(inner) 
    { 
        _toppingName = toppingName;
        _toppingPrice = toppingPrice;
    }
    
    public override decimal GetPrice() => base.GetPrice() + _toppingPrice;
    public override string GetDescription() => base.GetDescription() + $" + {_toppingName}";
}
```

**Vai trò:**
- Xử lý mọi topping từ database động
- Không cần tạo class mới cho mỗi topping
- Tương thích hoàn toàn với Decorator Pattern

#### **2. Factory Method Pattern**

**File:** `MilkTeaShop.Presentation/ViewModels/MainPOSViewModel.cs`

```csharp
private IPriceable CreateToppingDecorator(string toppingName, IPriceable baseDrink)
{
    // Bước 1: Lấy topping từ database
    var toppingFromDb = _menuService?.GetToppingItems()
        ?.FirstOrDefault(t => t.Name == toppingName);
    
    // Bước 2: Thử specific decorator (performance)
    var specificDecorator = toppingName switch
    {
        "Trân châu đen" => new BlackPearlTopping(baseDrink),
        // ... 23 decorators khác ...
        _ => null
    };
    
    if (specificDecorator != null)
        return specificDecorator; // Ưu tiên decorator cũ
    
    // Bước 3: Fallback sang DynamicTopping
    if (toppingFromDb != null)
        return new DynamicTopping(baseDrink, toppingName, toppingFromDb.BasePrice);
    
    // Bước 4: Log warning nếu không tìm thấy
    Console.WriteLine($"⚠️ WARNING: Topping '{toppingName}' not found!");
    return baseDrink;
}
```

**Quy trình:**
```
┌─────────────────────────────────────┐
│ Customer chọn topping "Thạch bạc hà"│
└──────────────┬──────────────────────┘
               │
               ▼
┌─────────────────────────────────────┐
│ Tìm trong Database                  │
│ → Found: Name="Thạch bạc hà"        │
│           Price=10,000đ             │
└──────────────┬──────────────────────┘
               │
               ▼
┌─────────────────────────────────────┐
│ Try Specific Decorator?             │
│ → "Thạch bạc hà" → ❌ Not found     │
└──────────────┬──────────────────────┘
               │
               ▼
┌─────────────────────────────────────┐
│ Create DynamicTopping               │
│ new DynamicTopping(                 │
│   baseDrink,                        │
│   "Thạch bạc hà",                   │
│   10000                             │
│ )                                   │
└──────────────┬──────────────────────┘
               │
               ▼
┌─────────────────────────────────────┐
│ Return decorated drink              │
│ Base: 45,000đ + Topping: 10,000đ    │
│ = 55,000đ ✅                        │
└─────────────────────────────────────┘
```

### 📊 Sequence Diagram

```
User          POS           Factory         Database        Decorator
 │             │               │               │               │
 │─Select────>│               │               │               │
 │  Topping   │               │               │               │
 │             │               │               │               │
 │             │─GetTopping──>│               │               │
 │             │               │               │               │
 │             │               │─Query─────────>│              │
 │             │               │<──Result──────│               │
 │             │               │ (Name, Price) │               │
 │             │               │               │               │
 │             │               │─Try Specific─>│               │
 │             │               │<──Not Found───│               │
 │             │               │               │               │
 │             │               │─Create────────────────────────>│
 │             │               │         DynamicTopping         │
 │             │               │<───────────────────────────────│
 │             │               │        (decorated drink)       │
 │             │<──Return─────│               │               │
 │             │   Drink+Price│               │               │
 │<─Display───│               │               │               │
 │  Total     │               │               │               │
```

### 🧪 Unit Test Example

```csharp
[Test]
public void CreateToppingDecorator_NewTopping_UsesDynamicTopping()
{
    // Arrange
    var baseDrink = new BaseDrink("Trà sữa", 40000);
    var toppingName = "Thạch bạc hà";
    var toppingPrice = 10000m;
    
    // Mock database
    _mockMenuService.Setup(m => m.GetToppingItems())
        .Returns(new List<MenuItem> {
            new MenuItem { Name = toppingName, BasePrice = toppingPrice }
        });
    
    // Act
    var decorated = _viewModel.CreateToppingDecorator(toppingName, baseDrink);
    var price = decorated.GetPrice();
    
    // Assert
    Assert.AreEqual(50000m, price); // 40000 + 10000
    Assert.IsInstanceOf<DynamicTopping>(decorated);
    Console.WriteLine("✅ DynamicTopping working correctly");
}

[Test]
public void CreateToppingDecorator_OldTopping_UsesSpecificDecorator()
{
    // Arrange
    var baseDrink = new BaseDrink("Trà sữa", 40000);
    
    // Act
    var decorated = _viewModel.CreateToppingDecorator("Trân châu đen", baseDrink);
    var price = decorated.GetPrice();
    
    // Assert
    Assert.AreEqual(48000m, price); // 40000 + 8000
    Assert.IsInstanceOf<BlackPearlTopping>(decorated);
    Console.WriteLine("✅ Specific decorator still working");
}
```

### 🔍 Debugging Tips

#### **1. Kiểm tra console log**

Khi chạy app, mở Output window và tìm:
```
✅ Using DynamicTopping for 'Thạch bạc hà' with price 10,000đ
```

Nếu thấy:
```
⚠️ WARNING: Topping 'Thạch bạc hà' not found!
```
→ Topping chưa có trong database hoặc tên không khớp

#### **2. Breakpoint locations**

Set breakpoint tại:
- `CreateToppingDecorator()` - line đầu tiên
- `new DynamicTopping()` - khi tạo decorator
- `GetPrice()` trong OrderItem - khi tính giá

#### **3. Watch variables**

```
toppingFromDb?.Name
toppingFromDb?.BasePrice
specificDecorator (should be null for new toppings)
decorated.GetPrice()
```

### 📝 Code Guidelines

#### **Khi nào cần thêm Specific Decorator?**

**❌ KHÔNG CẦN** nếu:
- Topping đơn giản (chỉ cộng giá)
- Không có logic đặc biệt
- DynamicTopping đủ xử lý

**✅ CẦN** nếu:
- Có logic phức tạp (VD: giảm giá theo combo)
- Có side effects (VD: loyalty points)
- Performance critical (VD: topping hot nhất)

**Ví dụ thêm Specific Decorator:**

```csharp
// File: ToppingDecorators.cs
public class SpecialComboTopping : DrinkDecorator
{
    public SpecialComboTopping(IPriceable inner) : base(inner) { }
    
    public override decimal GetPrice() 
    {
        // Giảm 20% nếu đặt combo
        return base.GetPrice() + (15000m * 0.8m);
    }
    
    public override string GetDescription() 
        => base.GetDescription() + " + Combo đặc biệt (Giảm 20%)";
}

// File: MainPOSViewModel.cs
private IPriceable CreateToppingDecorator(string toppingName, IPriceable baseDrink)
{
    // ...existing code...
    
    var specificDecorator = toppingName switch
    {
        "Combo đặc biệt" => new SpecialComboTopping(baseDrink), // ← Thêm ở đây
        "Trân châu đen" => new BlackPearlTopping(baseDrink),
        // ...
    };
    
    // ...existing code...
}
```

---

## 🚀 ADVANCED: EXTENDING THE SYSTEM

### 1. **Thêm Topping Category**

Nếu muốn phân loại topping (Pearl, Jelly, Cream, etc.):

```csharp
// Add to MenuItem.cs
public enum ToppingCategory
{
    Pearl,
    Jelly,
    Cream,
    Bean,
    Fruit
}

public class MenuItem
{
    // ...existing properties...
    public ToppingCategory? ToppingCategory { get; set; }
}

// Filter in UI
var pearlToppings = _menuService.GetToppingItems()
    .Where(t => t.ToppingCategory == ToppingCategory.Pearl);
```

### 2. **Thêm Topping Combo Discount**

```csharp
// New decorator
public class ComboDiscountTopping : DrinkDecorator
{
    private readonly List<string> _toppings;
    
    public ComboDiscountTopping(IPriceable inner, List<string> toppings) 
        : base(inner) 
    { 
        _toppings = toppings;
    }
    
    public override decimal GetPrice()
    {
        var basePrice = base.GetPrice();
        
        // Nếu có >= 3 toppings, giảm 10%
        if (_toppings.Count >= 3)
            return basePrice * 0.9m;
        
        return basePrice;
    }
}
```

### 3. **Thêm Seasonal Topping**

```csharp
public class SeasonalTopping : DrinkDecorator
{
    private readonly DateTime _startDate;
    private readonly DateTime _endDate;
    
    public override decimal GetPrice()
    {
        if (DateTime.Now < _startDate || DateTime.Now > _endDate)
            throw new InvalidOperationException("Topping hết mùa!");
        
        return base.GetPrice() + _price;
    }
}
```

---

## 🎓 FAQ

### Q1: Tại sao giữ lại specific decorators cũ?

**A:** Performance + Flexibility
- Specific decorators: Fast lookup, no DB query
- Dynamic decorators: Flexible, auto từ DB
- Best of both worlds!

### Q2: Có thể xóa topping cũ không?

**A:** Có, nhưng kiểm tra:
1. Không có đơn hàng pending với topping đó
2. Update hóa đơn cũ nếu cần
3. Backup database trước khi xóa

### Q3: Làm sao để topping có nhiều giá theo size?

**A:** Có 2 cách:
1. **Cách 1:** Size modifier áp dụng cho toàn bộ (hiện tại)
2. **Cách 2:** Tạo 3 MenuItem riêng (Small, Medium, Large)

```csharp
// Cách 2 example
new MenuItem { Name = "Trân châu đen (S)", BasePrice = 7000, ... }
new MenuItem { Name = "Trân châu đen (M)", BasePrice = 8000, ... }
new MenuItem { Name = "Trân châu đen (L)", BasePrice = 9000, ... }
```

### Q4: Performance có bị ảnh hưởng không?

**A:** Minimal impact
- Specific decorators: O(1) - instant
- Dynamic decorators: O(n) - nhưng n nhỏ (<50 toppings)
- Cache có thể thêm nếu cần

### Q5: Có thể import bulk toppings không?

**A:** Có! Qua JSON:

```json
[
  {
    "Name": "Thạch bạc hà",
    "BasePrice": 10000,
    "Category": "Topping",
    "Description": "..."
  },
  {
    "Name": "Thạch dưa hấu",
    "BasePrice": 11000,
    "Category": "Topping",
    "Description": "..."
  }
]
```

Import bằng code:
```csharp
var toppings = JsonSerializer.Deserialize<List<MenuItem>>(json);
foreach (var topping in toppings)
{
    _menuService.AddItem(topping);
}
```

---

## 📞 SUPPORT

Nếu gặp vấn đề:
1. ✅ Kiểm tra console log
2. ✅ Verify database có topping
3. ✅ Chạy test script
4. ✅ Báo cáo với log đầy đủ

---

## 🎉 KẾT LUẬN

Hệ thống giờ đây:
- ✅ Linh hoạt hoàn toàn với topping
- ✅ Không cần developer cho topping mới
- ✅ Maintain dễ dàng
- ✅ Performance tốt

**Happy Managing! 🧋**
