using MilkTeaShop.Domain.Entities;
using MilkTeaShop.Domain.Data;
using MilkTeaShop.Domain.ValueObjects;

namespace MilkTeaShop.Application.Services;

public interface IMenuService
{
    List<MenuItem> GetMilkTeaItems();
    List<MenuItem> GetToppingItems();
    List<MenuItem> GetAllItems();
    Task<List<MenuItem>> GetAllItemsAsync(); // Add async version for better UI responsiveness
    void AddNewItem(MenuItem item);
    MenuItem? GetItemById(string id);
    void UpdateItem(MenuItem item);
    bool RemoveItem(MenuItem item);
}

public class MenuService : IMenuService
{
    public List<MenuItem> GetMilkTeaItems() => StaticMenuData.MilkTeaItems.Where(x => x.IsAvailable).ToList();
    
    public List<MenuItem> GetToppingItems() => StaticMenuData.ToppingItems.Where(x => x.IsAvailable).ToList();
    
    public List<MenuItem> GetAllItems() => StaticMenuData.GetAllItems().Where(x => x.IsAvailable).ToList();
    
    public Task<List<MenuItem>> GetAllItemsAsync() => Task.FromResult(GetAllItems());
    
    public void AddNewItem(MenuItem item)
    {
        StaticMenuData.AddNewItem(item);
    }
    
    public MenuItem? GetItemById(string id) => StaticMenuData.GetAllItems().FirstOrDefault(x => x.Id == id);

    public void UpdateItem(MenuItem item)
    {
        // For StaticMenuData, we need to find and update the item
        var allItems = StaticMenuData.GetAllItems();
        var existingItem = allItems.FirstOrDefault(x => x.Id == item.Id);
        if (existingItem != null)
        {
            StaticMenuData.UpdateItem(existingItem, item);
        }
    }

    public bool RemoveItem(MenuItem item)
    {
        return StaticMenuData.RemoveItem(item);
    }
}