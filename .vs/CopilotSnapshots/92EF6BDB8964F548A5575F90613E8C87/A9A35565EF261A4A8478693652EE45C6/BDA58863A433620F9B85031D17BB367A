using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using Microsoft.Win32;
using System.Windows.Media.Imaging;
using MilkTeaShop.Domain.Entities;
using MilkTeaShop.Domain.ValueObjects;
using MilkTeaShop.Application.Services;
using MilkTeaShop.Domain.Data;

namespace MilkTeaShop.Presentation.ViewModels;

public class AddEditItemViewModel : BaseViewModel
{
    private readonly Window _window;
    private readonly IMenuService _menuService;
    private MenuItem? _editingItem;
    private bool _isEditMode;

    private string _name = "";
    private decimal _basePrice;
    private string _description = "";
    private string _imagePath = "";
    private MenuCategory _selectedCategory = MenuCategory.MilkTea;

    public ObservableCollection<MenuCategory> Categories { get; } = new()
    {
        MenuCategory.MilkTea,
        MenuCategory.Topping
    };

    public RelayCommand SelectImageCommand { get; }
    public RelayCommand SaveCommand { get; }
    public RelayCommand CancelCommand { get; }

    public AddEditItemViewModel(Window window)
    {
        _window = window;
        _menuService = new MenuService();
        
        SelectImageCommand = new RelayCommand(SelectImage);
        SaveCommand = new RelayCommand(Save, CanSave);
        CancelCommand = new RelayCommand(Cancel);
    }

    public string Title => _isEditMode ? "Chỉnh sửa món" : "Thêm món mới";

    public string Name
    {
        get => _name;
        set
        {
            _name = value;
            OnPropertyChanged();
            SaveCommand.RaiseCanExecuteChanged();
        }
    }

    public decimal BasePrice
    {
        get => _basePrice;
        set
        {
            _basePrice = value;
            OnPropertyChanged();
            SaveCommand.RaiseCanExecuteChanged();
        }
    }

    public string Description
    {
        get => _description;
        set
        {
            _description = value;
            OnPropertyChanged();
        }
    }

    public string ImagePath
    {
        get => _imagePath;
        set
        {
            _imagePath = value;
            OnPropertyChanged();
        }
    }

    public MenuCategory SelectedCategory
    {
        get => _selectedCategory;
        set
        {
            _selectedCategory = value;
            OnPropertyChanged();
        }
    }

    public void LoadItem(MenuItem item)
    {
        _editingItem = item;
        _isEditMode = true;
        
        Name = item.Name;
        BasePrice = item.BasePrice;
        Description = item.Description ?? "";
        ImagePath = item.ImagePath ?? "";
        SelectedCategory = item.Category;
        
        OnPropertyChanged(nameof(Title));
    }

    private void SelectImage(object? parameter)
    {
        var openFileDialog = new OpenFileDialog
        {
            Filter = "Image files (*.png;*.jpg;*.jpeg;*.gif;*.bmp)|*.png;*.jpg;*.jpeg;*.gif;*.bmp|All files (*.*)|*.*",
            Title = "Chọn hình ảnh",
            InitialDirectory = GetImagesDirectory()
        };

        if (openFileDialog.ShowDialog() == true)
        {
            try
            {
                // Validate image file
                var bitmap = new BitmapImage(new Uri(openFileDialog.FileName));
                
                // Copy image to Images folder if not already there
                var targetPath = CopyImageToAppDirectory(openFileDialog.FileName);
                ImagePath = targetPath;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Không thể tải hình ảnh: {ex.Message}\nVui lòng chọn file hình ảnh hợp lệ.", 
                               "Lỗi", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }

    private bool CanSave(object? parameter)
    {
        return !string.IsNullOrWhiteSpace(Name) && BasePrice > 0;
    }

    private void Save(object? parameter)
    {
        try
        {
            if (_isEditMode && _editingItem != null)
            {
                // Update existing item
                _editingItem.Name = Name.Trim();
                _editingItem.BasePrice = BasePrice;
                _editingItem.Description = Description.Trim();
                _editingItem.ImagePath = ImagePath;
                _editingItem.Category = SelectedCategory;
                
                MessageBox.Show($"Đã cập nhật '{Name}' thành công!", "Thông báo",
                               MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                // Create new item
                var newItem = new MenuItem
                {
                    Name = Name.Trim(),
                    BasePrice = BasePrice,
                    Description = Description.Trim(),
                    ImagePath = ImagePath,
                    Category = SelectedCategory
                };

                StaticMenuData.AddNewItem(newItem);
                
                MessageBox.Show($"Đã thêm '{Name}' thành công!", "Thông báo",
                               MessageBoxButton.OK, MessageBoxImage.Information);
            }

            _window.DialogResult = true;
            _window.Close();
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Lỗi khi lưu món: {ex.Message}", "Lỗi",
                           MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }

    private void Cancel(object? parameter)
    {
        _window.DialogResult = false;
        _window.Close();
    }

    private string GetImagesDirectory()
    {
        var appDirectory = AppDomain.CurrentDomain.BaseDirectory;
        var imagesDirectory = Path.Combine(appDirectory, "Images");
        
        if (!Directory.Exists(imagesDirectory))
        {
            Directory.CreateDirectory(imagesDirectory);
        }
        
        return imagesDirectory;
    }

    private string CopyImageToAppDirectory(string sourcePath)
    {
        var imagesDirectory = GetImagesDirectory();
        var fileName = Path.GetFileName(sourcePath);
        var targetPath = Path.Combine(imagesDirectory, fileName);
        
        // If file already exists in Images folder, return relative path
        if (File.Exists(targetPath))
        {
            return Path.Combine("Images", fileName);
        }
        
        // If source is already in Images folder, return relative path
        if (sourcePath.StartsWith(imagesDirectory))
        {
            return Path.Combine("Images", fileName);
        }
        
        try
        {
            // Copy file to Images folder
            File.Copy(sourcePath, targetPath, true);
            return Path.Combine("Images", fileName);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Không thể sao chép ảnh: {ex.Message}\nSử dụng đường dẫn gốc.", 
                           "Cảnh báo", MessageBoxButton.OK, MessageBoxImage.Warning);
            return sourcePath; // Return original path if copy fails
        }
    }
}